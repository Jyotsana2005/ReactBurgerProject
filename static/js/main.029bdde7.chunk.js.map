{"version":3,"sources":["logo.svg","Components/Burger/BurgerIngredient/BurgerIngredient.js","Container/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kIAAAA,EAAOC,QAAU,IAA0B,kC,2RCIZC,YCAHA,YC0dbC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yCACa,4CADb,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCrcYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.029bdde7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classes from './BurgerIngredient.css'\r\n\r\nclass BurgerIngredient extends Component {\r\n    render() {\r\n        let ingredient = null;\r\n        switch (this.props.type) {\r\n            case ('bread-bottom'):\r\n                ingredient = <div className={classes.BreadBottom}></div>;\r\n                break;\r\n            case ('bread-top'):\r\n                ingredient = (\r\n                    <div className={classes.BreadTop}>\r\n                        <div className={classes.Seeds1}></div>;\r\n                        <div className={classes.Seeds2}></div>;\r\n                    </div>\r\n                );\r\n                break;\r\n            case ('meat'):\r\n                ingredient = <div className={classes.Meat}></div>;\r\n                break;\r\n            case ('cheese'):\r\n                ingredient = <div className={classes.Cheese}></div>;\r\n                break;\r\n            case ('bacon'):\r\n                ingredient = <div className={classes.Bacon}></div>;\r\n                break;\r\n            case ('salad'):\r\n                ingredient = <div className={classes.Salad}></div>;\r\n                break;\r\n            default:\r\n                ingredient = null;\r\n        }\r\n        return ingredient;\r\n    }\r\n}\r\nBurgerIngredient.propTypes={\r\n    type:PropTypes.string.isRequired\r\n}\r\nexport default BurgerIngredient\r\n\r\n","import React, { Component } from 'react'\r\n// import Aux from '../../hoc/Aux'\r\nimport Burger from '../../Components/Burger/Burger'\r\n\r\nclass BurgerBuilder extends Component {\r\n    state={\r\n        ingredients:{\r\n            salad:1,\r\n            cheese:2,\r\n            bacon:1,\r\n            meat:2\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <p>hii</p>\r\n            // <div>\r\n            //     {/* <Aux>\r\n            //         <div>Burger</div>\r\n            //         <Burger ingredients={this.state.ingredients}/>\r\n            //         <div>Burger Control</div>\r\n            //         {/* <BuildControls/> */}\r\n            //     </Aux> */}\r\n            // </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder\r\n","import React, { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Person from './Components/Persons/Person/person'\nimport UserOutput from './Components/UserOutput/UserOutput';\nimport UserInput from './Components/UserInput/UserInput';\nimport ValidationComponent from './Components/ValidationComponents/ValidationComponents'\nimport Char from './Components/Char/Char'\nimport Layout from './Components/Layout/Layout';\nimport BurgerBuilder from './Container/BurgerBuilder/BurgerBuilder'\nimport person from './Components/Persons/Person/person';\n\n//Burger App\n// class App extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <Layout>\n//           <p>Text</p>\n//           <BurgerBuilder/>\n//         </Layout>\n//       </div>\n//     )\n//   }\n// }\n\n\n// export default App;\n\n\n// example of props\n// class App extends Component {\n//   render(){\n//     const style={\n//       backgroundColor:\"red\"\n//     }\n//   return (\n//     <div className=\"App\">\n//       <p style={style}>Hello</p>\n//       <Person name=\"jyotsana\" course=\"react\" />\n//       <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person>\n//     </div>\n//   );\n// }\n// }\n// export default App;\n\n\n//example of state\n// class App extends Component {\n//   state={\n//     person:[\n//       {name:'sonu', course:'react'},\n//       {name:'Sonam', course:'physio'},\n//       {name:'Karuna', course:'hindi'}\n//     ]\n//   }\n//   switchHandler=()=>{\n//     this.setState({\n//       person:[\n//         {name:'Jyotsana', course:'Angular'},\n//         {name:'Nidhi', course:'Angular'},\n//         {name:'Mishra', course:'Angular'}\n\n//       ]\n//     })\n//   }\n//   render(){\n//   return (\n//     <div className=\"App\">\n//       <p>Hello</p>\n//       <button onClick={this.switchHandler}>Switch Button</button>\n//       <Person name={this.state.person[0].name} course={this.state.person[0].course} />\n//       <Person name={this.state.person[1].name} course={this.state.person[1].course} />\n//       <Person name={this.state.person[2].name} course={this.state.person[2].course} />\n//       <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person>\n//     </div>\n//   );\n// }\n// }\n// export default App;\n\n\n\n\n// example of useState()\n// const App = props => {\n//   // const [personState->current state, setPersonState-> function to change state] = useState({\n//   const [personState, setPersonState] = useState({\n//     person: [\n//       { name: 'sonu', course: 'react' },\n//       { name: 'Sonam', course: 'physio' },\n//       { name: 'Karuna', course: 'hindi' }\n//     ]\n//   });\n\n//  const switchHandler = () => {\n//     setPersonState({\n//       person: [\n//         { name: 'Jyotsana', course: 'Angular' },\n//         { name: 'Nidhi', course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//   // render(){\n//   return (\n//     <div className=\"App\">\n//       <p>Hello</p>\n//       <button onClick={switchHandler}>Switch Button</button>\n//       <Person name={personState.person[0].name} course={personState.person[0].course} />\n//       <Person name={personState.person[1].name} course={personState.person[1].course} />\n//       <Person name={personState.person[2].name} course={personState.person[2].course} />\n//       <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person>\n//     </div>\n//   );\n//   // }\n// }\n// export default App;\n\n\n// two way binding\n// class App extends Component {\n//      state={\n//     person: [\n//       { name: 'sonu', course: 'react' },\n//       { name: 'Sonam', course: 'physio' },\n//       { name: 'Karuna', course: 'hindi' }\n//     ]\n//   }\n//   // });\n\n//   switchHandler = (myName) => {\n//   this.setState({\n//       person: [\n//         { name: myName, course: 'Angular' },\n//         { name: 'Nidhi', course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//    nameChangeHandler = (event) => {\n//     this.setState({\n//       person: [\n//         { name: 'Jyotsana', course: 'Angular' },\n//         { name: event.target.value, course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//   render(){\n//   return (\n//     <div className=\"App\">\n//       {/* <p>Hello</p> */}\n//       <button onClick={()=> this.switchHandler('Jyotsana')}>Switch Button</button>\n//       <Person name={this.state.person[0].name} course={this.state.person[0].course} />\n//       <Person name={this.state.person[1].name} course={this.state.person[1].course} click={this.switchHandler.bind(this,'Max!!')} changed={this.nameChangeHandler} />\n//       <Person name={this.state.person[2].name} course={this.state.person[2].course} />\n//       {/* <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//     </div>\n//   );\n//   }\n// }\n// export default App;\n\n// List and conditions\n// class App extends Component {\n//      state={\n//     person: [\n//       { name: 'sonu', course: 'react' },\n//       { name: 'Sonam', course: 'physio' },\n//       { name: 'Karuna', course: 'hindi' }\n//     ]\n//   }\n//   // });\n\n//   switchHandler = (myName) => {\n//   this.setState({\n//       person: [\n//         { name: myName, course: 'Angular' },\n//         { name: 'Nidhi', course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//    nameChangeHandler = (event) => {\n//     this.setState({\n//       person: [\n//         { name: 'Jyotsana', course: 'Angular' },\n//         { name: event.target.value, course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//   render(){\n//   return (\n//     <div className=\"App\">\n//       {/* <p>Hello</p> */}\n//       <button onClick={()=> this.switchHandler('Jyotsana')}>Switch Button</button>\n//       <Person name={this.state.person[0].name} course={this.state.person[0].course} />\n//       <Person name={this.state.person[1].name} course={this.state.person[1].course} click={this.switchHandler.bind(this,'Max!!')} changed={this.nameChangeHandler} />\n//       <Person name={this.state.person[2].name} course={this.state.person[2].course} />\n//       {/* <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//     </div>\n//   );\n//   }\n// }\n// export default App;\n\n\n//Assignment 1\n// class App extends Component {\n//   state={\n//       username:\"sonu\"\n//   }\n//   inputHandler=(e)=>{\n//     this.setState({username:e.target.value})\n//   }\n//   render(){\n//     const style={\n//       backgroundColor:\"red\"\n//     }\n//   return (\n//     <div className=\"App\">\n//       <p style={style}>Hello</p>\n//       {/* <Person name=\"jyotsana\" course=\"react\" />\n//       <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//       <UserInput changed={this.inputHandler} currentName={this.state.username}/>\n//       <UserOutput name={this.state.username}/>\n//     </div>\n//   );\n// }\n// }\n// export default App;\n\n//Conditional operator\n// class App extends Component {\n//     state={\n//       person:[\n//         {name:'sonu', course:'react'},\n//         {name:'sonam', course:'angular'},\n//         {name:'karuna', course:'vue'}\n//       ],\n//       showPerson:false\n\n//     }\n//     switchHandler=()=>{\n//       this.setState({\n//         person:[\n//           {name:'Jyotsana', course:'C'},\n//           {name:'Nidhi', course:'C++'},\n//           {name:'Mishra', course:'Java'}\n//         ],\n//       })\n//     }\n//     nameChangeHandler = (event) => {\n//           this.setState({\n//             person: [\n//               { name: 'Jyotsana', course: 'Angular' },\n//               { name: event.target.value, course: 'Angular' },\n//               { name: 'Mishra', course: 'Angular' }\n//             ]\n//           });\n//         };\n//     togglePersonHandler=()=>{\n//       const doesShow= this.state.showPerson\n//       this.setState({showPerson:!doesShow})\n//     }\n\n\n//     render(){\n//     return (\n//       <div className=\"App\">\n//         <p>Hello</p>\n//         <button onClick={this.togglePersonHandler}>Switch Button</button>\n//         {\n//           this.state.showPerson===true?\n//           <div>\n//         <Person name={this.state.person[0].name} course={this.state.person[0].course} />\n//         <Person name={this.state.person[1].name} course={this.state.person[1].course} click={this.switchHandler.bind(this,'Max!!')} changed={this.nameChangeHandler}  />\n//         <Person name={this.state.person[2].name} course={this.state.person[2].course}  />\n//         </div>:null\n//         }\n\n//         {/* <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//       </div>\n//     );\n//   }\n//   }\n// export default App\n\n//conditional in js way\n// class App extends Component {\n//     state={\n//       person:[\n//         {name:'sonu', course:'react'},\n//         {name:'sonam', course:'angular'},\n//         {name:'karuna', course:'vue'}\n//       ],\n//       showPerson:false\n\n//     }\n//     switchHandler=()=>{\n//       this.setState({\n//         person:[\n//           {name:'Jyotsana', course:'C'},\n//           {name:'Nidhi', course:'C++'},\n//           {name:'Mishra', course:'Java'}\n//         ],\n//       })\n//     }\n//     nameChangeHandler = (event) => {\n//           this.setState({\n//             person: [\n//               { name: 'Jyotsana', course: 'Angular' },\n//               { name: event.target.value, course: 'Angular' },\n//               { name: 'Mishra', course: 'Angular' }\n//             ]\n//           });\n//         };\n//     togglePersonHandler=()=>{\n//       const doesShow= this.state.showPerson\n//       this.setState({showPerson:!doesShow})\n//     }\n\n\n//     render(){\n\n//     let persons=null;\n//     if(this.state.showPerson){\n//       persons=\n//       <div>\n//       <Person name={this.state.person[0].name} course={this.state.person[0].course} />\n//       <Person name={this.state.person[1].name} course={this.state.person[1].course} click={this.switchHandler.bind(this,'Max!!')} changed={this.nameChangeHandler}  />\n//       <Person name={this.state.person[2].name} course={this.state.person[2].course}  />\n//       </div>\n//     }\n//     return (\n//       <div className=\"App\">\n//         <p>Hello</p>\n//         <button onClick={this.togglePersonHandler}>Switch Button</button>\n//         {persons}\n//         {/* <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//       </div>\n//     );\n//   }\n//   }\n// export default App\n\n//For Loop\n// class App extends Component {\n//   state = {\n//     person: [\n//       { name: 'sonu', course: 'react' },\n//       { name: 'sonam', course: 'angular' },\n//       { name: 'karuna', course: 'vue' }\n//     ],\n//     showPerson: false\n\n//   }\n//   switchHandler = () => {\n//     this.setState({\n//       person: [\n//         { name: 'Jyotsana', course: 'C' },\n//         { name: 'Nidhi', course: 'C++' },\n//         { name: 'Mishra', course: 'Java' }\n//       ],\n//     })\n//   }\n\n//   deletePersonHandler=(personIndex)=>{\n// const persons=this.state.persons;\n// persons.splice(personIndex,1);\n// this.setState({persons:persons})\n//   }\n//   nameChangeHandler = (event) => {\n//     this.setState({\n//       person: [\n//         { name: 'Jyotsana', course: 'Angular' },\n//         { name: event.target.value, course: 'Angular' },\n//         { name: 'Mishra', course: 'Angular' }\n//       ]\n//     });\n//   };\n//   togglePersonHandler = () => {\n//     const doesShow = this.state.showPerson\n//     this.setState({ showPerson: !doesShow })\n//   }\n\n\n//   render() {\n\n//     let persons = null;\n\n//     if (this.state.showPerson) {\n//       persons = (\n//         <div>\n//           {this.state.persons.map((person,index)=>{\n//             return <Person name={person.name} course={person.course} click={()=>this.deletePersonHandler(index)} />\n//           })}\n//         </div>\n//       );\n//     }\n//     return (\n//       <div className=\"App\">\n//         <p>Hello</p>\n//         <button onClick={this.togglePersonHandler}>Switch Button</button>\n//         {/* {persons} */}\n//         {/* <Person name=\"jyotsana\" course=\"react\">My first tutorial</Person> */}\n//       </div>\n\n//     );\n//   }\n// }\n// export default App;\n\n//Assignment 2 Lists and components\n// class App extends Component {\n//   state = {\n//     username: ''\n//   }\n//   inputChangeHandler = (events) => {\n//     this.setState({ username: events.target.value })\n//   }\n\n//   deleteCharHandler =(index)=>{\n//     const text=this.state.username.split('');\n//     text.splice(index,1);\n//     const updatedText=text.join('');\n//     this.setState({username:updatedText})\n\n\n//   }\n//   render() {\n//     const charlist= this.state.username.split('').map((ch,index)=>{\n//       return <Char character={ch} key={index} clicked={()=>{this.deleteCharHandler(index)}}/>\n//     })\n//     return (\n//       <div className=\"App\">\n//         <input type=\"text\" onChange={this.inputChangeHandler} value={this.state.username} />\n//         <p>{this.state.username}</p>\n//         <ValidationComponent inputLength={this.state.username.length}/>\n//         {charlist}\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n//Burger App\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit react <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}